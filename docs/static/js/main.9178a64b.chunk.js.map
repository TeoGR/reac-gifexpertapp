{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","map","img","id","title","images","downsized_large","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAERC,mBAAS,IAFD,mBAErCC,EAFqC,KAEzBC,EAFyB,KAqB5C,OACI,sBAAMC,SAZW,SAACC,GAElBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACvCN,EAAc,MAMlB,SACI,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAnBpB,SAACP,GAGvBF,EAAcE,EAAEQ,OAAOF,a,+BCVlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACoCC,UAAWH,GAD/C,+DAEAI,MAAOF,GAFP,cAEbG,EAFa,gBAIEA,EAAKC,OAJP,uBAIZC,EAJY,EAIZA,KAEDR,EAAUQ,EAAKC,KAAK,SAAAC,GAAQ,IAAD,EAC7B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXT,IAAG,UAAEO,EAAIG,cAAN,aAAE,EAAYC,gBAAgBX,QAVtB,kBAcZH,GAdY,4CAAH,sDCEPe,EAAc,SAAC,GAAsB,IAArBJ,EAAoB,EAApBA,GAAIC,EAAgB,EAAhBA,MAAOT,EAAS,EAATA,IAEpC,OACI,sBAAKa,UAAU,uCAAf,UACI,qBAAKC,IAAKd,EAAKe,IAAKN,EAAOD,GAAIA,IAC/B,4BAAIC,QCHHO,EAAU,SAAC,GAAgB,IAAflB,EAAc,EAAdA,SAAc,ECDX,SAACA,GAAc,IAAD,EACZd,mBAAS,CAC/BqB,KAAM,GACNY,SAAS,IAHyB,mBAC/BC,EAD+B,KACxBC,EADwB,KAoBtC,OAbAC,qBAAW,WACPvB,EAAQC,GAAUuB,MAAM,SAAAC,GAEpBC,YAAW,WACPJ,EAAS,CACLd,KAAMiB,EACNL,SAAS,MAEd,UAGR,CAAEnB,IAEEoB,EDdyBM,CAAa1B,GAAhCY,EALsB,EAK5BL,KAAcY,EALc,EAKdA,QAErB,OACI,qCACI,oBAAIJ,UAAU,wCAAd,SAAwDf,IAEvDmB,GAAW,mBAAGJ,UAAU,wCAAb,yBAEZ,qBAAKA,UAAU,YAAf,SAUQH,EAAOJ,KAAK,SAACC,GAAD,OACR,cAAC,EAAD,eAGQA,GAFCA,EAAIC,aEzBxBiB,EAAe,WAAM,MAIMzC,mBAAS,CAAC,QAJhB,mBAIvB0C,EAJuB,KAIX3C,EAJW,KAe9B,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BAEQ2C,EAAWpB,KAAK,SAAAR,GAAQ,OAEpB,aADA,CACC,EAAD,CAAwBA,SAAUA,GAApBA,Y,MCvBtC6B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.9178a64b.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n    \r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (e) => {\r\n        //console.log(e.target.value)\r\n        //tomar el nuevo valor que tiene el input\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        //para no recargar la pagina entera\r\n        e.preventDefault();\r\n\r\n        if(inputValue.trim().length > 0){\r\n            setCategories( cats => [inputValue, ...cats]);\r\n            setInputValue('');\r\n        }\r\n\r\n    }\r\n    \r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input type=\"text\" value={inputValue} onChange={handleInputChange}></input>\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}","export const getGifs = async( category ) =>{\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category )}&limit=10&api_key=CIeFeWs8JPzvQ65XPYK7yr5Abs4rjzNG`;\r\n    const resp = await fetch( url );\r\n    \r\n    const {data} = await resp.json();\r\n\r\n    const getGifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_large.url\r\n        }\r\n    });\r\n\r\n    return getGifs;\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({id, title, url}) => {\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__tada\">\r\n            <img src={url} alt={title} id={id}></img>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React/*, {useState, useEffect}*/ from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({category}) => {\r\n    \r\n    // const [images, setImages] = useState([]);\r\n\r\n    //custoHook\r\n    const {data: images, loading} = useFetchGifs(category);\r\n        \r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__backInLeft\">{ category }</h3>\r\n\r\n            {loading && <p className=\"animate__animated animate__backInLeft\">Cargando...</p>}\r\n\r\n            <div className=\"card-grid\">\r\n                {/* <ol>\r\n                    {\r\n                        images.map( ({id, title})=> (\r\n                            <li key={id}>{title}</li>\r\n                        ))\r\n                    }\r\n                </ol> */}\r\n\r\n                {\r\n                    images.map( (img)=> (\r\n                        <GifGridItem \r\n                            key={img.id} \r\n                            // img = {img}\r\n                            {...img}\r\n                        />\r\n                    ))\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import {useState, useEffect} from 'react'\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    //rendiraza todo una sola vez\r\n    useEffect( () =>{\r\n        getGifs(category).then( imgs => {\r\n\r\n            setTimeout(() => {\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                })                \r\n            }, 100);\r\n\r\n        });\r\n    }, [ category ]);\r\n\r\n    return state; //{ data: [], loading: true }\r\n}\r\n","import React, {useState} from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    // const categories = ['One Punch', 'Samurai X', 'DBZ']\r\n\r\n    const [categories, setCategories] = useState(['DBZ']);\r\n/*\r\n    const handleAdd = () =>{\r\n        //Mala practica, no se debe mutar el objeto original\r\n        //categories.push('Naruto');\r\n\r\n        //debo usar el setcategories para que react renderize de nuevo, las dos lineas siguientes son correctas\r\n        setCategories( [...categories, 'Naruto']);\r\n        //setCategories( cats => [...cats, 'Naruto']);\r\n    }\r\n*/\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={setCategories} />\r\n            <hr />\r\n\r\n            <ol>\r\n                {\r\n                    categories.map( category => \r\n                        //return <li key={ category }>{ category }</li>\r\n                        <GifGrid key={category} category={category}/>\r\n                    )\r\n                }  \r\n            </ol>\r\n            \r\n        </>\r\n    )\r\n}\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}